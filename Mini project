package org.example;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

class TicTacToeGUI extends JFrame implements ActionListener {

    // --- Dark Theme Colors ---
    private static final Color BG_DARK = new Color(20, 20, 30); // Very Dark Blue/Gray Background
    private static final Color BOARD_GRID_COLOR = new Color(35, 35, 50); // Slightly lighter panel background
    private static final Color X_NEON = new Color(255, 60, 100); // Bright, bold RED (Neon Pink/Red)
    private static final Color O_NEON = new Color(50, 220, 255); // Bright, bold CYAN (Neon Blue/Cyan)
    private static final Color TEXT_LIGHT = new Color(230, 230, 250); // Light text for contrast (Lavender)
    private static final Color BUTTON_INACTIVE = new Color(45, 45, 60); // Dark, muted button background
    private static final Color HOVER_EFFECT = new Color(60, 60, 80); // Lighter background for hover
    private static final Color WIN_HIGHLIGHT = new Color(20, 255, 120); // Bright Green for win

    private final JButton[][] buttons = new JButton[3][3];
    private boolean isPlayerXTurn = true;
    private final JLabel statusLabel;
    private int movesMade = 0;

    public TicTacToeGUI() {
        // --- Frame Setup ---
        setTitle("Tic Tac Toe // NEON EDITION");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout(10, 10));
        getContentPane().setBackground(BG_DARK);

        // --- Game Board Panel ---
        JPanel boardPanel = new JPanel();
        boardPanel.setLayout(new GridLayout(3, 3, 7, 7)); // Increased spacing
        boardPanel.setBorder(BorderFactory.createEmptyBorder(15, 15, 15, 15));
        boardPanel.setBackground(BOARD_GRID_COLOR); // Darker panel

        // --- Initialize Buttons (The Grid) ---
        Font markFont = new Font("Monospaced", Font.BOLD, 85); // Bold, high-tech font

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                JButton button = new JButton("");
                button.setFont(markFont);
                button.setFocusable(false);
                button.setBackground(BUTTON_INACTIVE);

                // Bold Border Style (no border to keep it sleek, but we can use padding)
                button.setBorder(BorderFactory.createEmptyBorder());

                // Custom UI property for better visibility on dark background
                button.setForeground(TEXT_LIGHT);
                button.addActionListener(this);
                addHoverEffect(button);
                buttons[i][j] = button;
                boardPanel.add(button);
            }
        }

        // --- Status and Control Panel (Bottom) ---
        JPanel controlPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 30, 10));
        controlPanel.setBackground(BG_DARK);

        // 1. Status Label
        statusLabel = new JLabel("Player X's Turn");
        statusLabel.setFont(new Font("Monospaced", Font.PLAIN, 24)); // Monospaced for a tech look
        statusLabel.setForeground(X_NEON); // Start with X's color
        controlPanel.add(statusLabel);

        // 2. Restart Button
        JButton restartButton = new JButton("RESTART");
        restartButton.setFont(new Font("Monospaced", Font.BOLD, 16));
        restartButton.setBackground(O_NEON.darker().darker()); // Darker background for button
        restartButton.setForeground(TEXT_LIGHT);
        restartButton.setFocusPainted(false);
        // Add a subtle neon border effect
        restartButton.setBorder(BorderFactory.createLineBorder(O_NEON, 2));
        restartButton.addActionListener(e -> resetGame());
        controlPanel.add(restartButton);

        // --- Add components to the Frame ---
        add(boardPanel, BorderLayout.CENTER);
        add(controlPanel, BorderLayout.SOUTH);

        // --- Final Frame Adjustments ---
        setSize(550, 550); // Increased size
        setLocationRelativeTo(null);
        setResizable(false); // Game should be fixed size for consistent look
        setVisible(true);
    }

    // Adds a bold hover effect
    private void addHoverEffect(JButton button) {
        button.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                if (button.isEnabled() && button.getText().isEmpty()) {
                    button.setBackground(HOVER_EFFECT);
                    // Pulsing/Subtle light for hover
                    button.setBorder(BorderFactory.createLineBorder(isPlayerXTurn ? X_NEON.darker() : O_NEON.darker(), 1));
                }
            }

            @Override
            public void mouseExited(MouseEvent e) {
                if (button.isEnabled() && button.getText().isEmpty()) {
                    button.setBackground(BUTTON_INACTIVE);
                    button.setBorder(BorderFactory.createEmptyBorder());
                }
            }
        });
    }

    // --- Main Entry Point ---
    public static void main(String[] args) {
        SwingUtilities.invokeLater(TicTacToeGUI::new);
    }

    // --- Handles button clicks ---
    @Override
    public void actionPerformed(ActionEvent e) {
        JButton clickedButton = (JButton) e.getSource();

        if (!clickedButton.getText().isEmpty() || !clickedButton.isEnabled()) {
            return;
        }

        String playerMark = isPlayerXTurn ? "X" : "O";
        clickedButton.setText(playerMark);
        // Set the distinct neon color for the mark
        clickedButton.setForeground(isPlayerXTurn ? X_NEON : O_NEON);
        clickedButton.setBackground(BOARD_GRID_COLOR.darker()); // Make the marked button slightly darker
        clickedButton.setBorder(BorderFactory.createEmptyBorder());
        movesMade++;

        if (checkForWin(playerMark)) {
            statusLabel.setText("PLAYER " + playerMark + " WINS! // TERMINATED");
            statusLabel.setForeground(WIN_HIGHLIGHT); // Bright green for victory
            disableAllButtons();
        } else if (movesMade == 9) {
            statusLabel.setText("SYSTEM DRAW // NO WINNER");
            statusLabel.setForeground(TEXT_LIGHT);
            disableAllButtons();
        } else {
            // Switch turn
            isPlayerXTurn = !isPlayerXTurn;
            String nextPlayer = isPlayerXTurn ? "X" : "O";
            statusLabel.setText("PLAYER " + nextPlayer + "'s Turn // AWAIT INPUT");
            statusLabel.setForeground(isPlayerXTurn ? X_NEON : O_NEON);
        }
    }

    // --- Win Logic (Modified to highlight with bold color) ---
    private boolean checkForWin(String mark) {
        // Check rows, columns, and diagonals (logic remains the same)
        for (int i = 0; i < 3; i++) {
            if (buttons[i][0].getText().equals(mark) && buttons[i][1].getText().equals(mark) && buttons[i][2].getText().equals(mark)) {
                highlightWinningButtons(buttons[i][0], buttons[i][1], buttons[i][2]);
                return true;
            }
            if (buttons[0][i].getText().equals(mark) && buttons[1][i].getText().equals(mark) && buttons[2][i].getText().equals(mark)) {
                highlightWinningButtons(buttons[0][i], buttons[1][i], buttons[2][i]);
                return true;
            }
        }
        if (buttons[0][0].getText().equals(mark) && buttons[1][1].getText().equals(mark) && buttons[2][2].getText().equals(mark)) {
            highlightWinningButtons(buttons[0][0], buttons[1][1], buttons[2][2]);
            return true;
        }
        if (buttons[0][2].getText().equals(mark) && buttons[1][1].getText().equals(mark) && buttons[2][0].getText().equals(mark)) {
            highlightWinningButtons(buttons[0][2], buttons[1][1], buttons[2][0]);
            return true;
        }
        return false;
    }

    // Highlights the winning combination
    private void highlightWinningButtons(JButton b1, JButton b2, JButton b3) {
        b1.setBackground(WIN_HIGHLIGHT);
        b2.setBackground(WIN_HIGHLIGHT);
        b3.setBackground(WIN_HIGHLIGHT);
        b1.setForeground(BG_DARK); // Dark text on bright background
        b2.setForeground(BG_DARK);
        b3.setForeground(BG_DARK);
    }

    // Disables the board after a win or draw
    private void disableAllButtons() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setEnabled(false);
                // Ensure non-winning buttons are visually disabled
                if (!buttons[i][j].getBackground().equals(WIN_HIGHLIGHT)) {
                    buttons[i][j].setBackground(BUTTON_INACTIVE);
                    buttons[i][j].setBorder(BorderFactory.createEmptyBorder());
                }
            }
        }
    }

    // Resets the game board and state
    private void resetGame() {
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                buttons[i][j].setText("");
                buttons[i][j].setEnabled(true);
                buttons[i][j].setBackground(BUTTON_INACTIVE);
                buttons[i][j].setBorder(BorderFactory.createEmptyBorder());
            }
        }
        isPlayerXTurn = true;
        movesMade = 0;
        statusLabel.setText("PLAYER X's Turn // INITIATE");
        statusLabel.setForeground(X_NEON);
    }
}
